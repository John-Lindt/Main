#include <iostream>
#include <list>
using namespace std;
class Graph {
int v;//number of vertices
list<int> *adj;//array of adjacency lists
public:
	Graph(int v) {
		this->v=v;
		adj=new list<int>[v];
	}
	void addV(int v, int w) {
		adj[v].push_back(w);
	}
	void BFS(int s) {
		bool *vis=new bool[v];
		for(int i=0;i<v;i++) {
			visited[i]=false;
		}
		list<int> queue;
		vis[s]=true;
		queue.push_back(s);
		list<int>::iterator i;
		while(!queue.empty()) {
			s=queue.front();
			cout << s << " ";
			queue.pop_front();
			for(i=adj[s].begin();i!=adj[s].end();i++) {
				if(!vis[*i]) {
					vis[*i]=true;
					queue.push_back(*i);
				}
			}
		}
	}
};
int main() {
//testing methods
Graph g(4);
g.addV(0,1);
g.addV(0,2);
g.addV(1,2);
g.addV(2,0);
g.addV(2,3);
g.addV(3,3);
cout << "Breadth first traversal from vertext 1: ";
g.BFS(1);
return 0;
}